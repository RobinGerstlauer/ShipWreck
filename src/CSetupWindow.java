
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Image;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Arrays;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.ButtonUI;

public class CSetupWindow extends javax.swing.JFrame implements PropertyChangeListener {
    private JLabel[] GridLabels;
    private JLabel[] InventoryShipLabels;
    public CSetupWindow() {
        initComponents();
        GridLabels = new JLabel[100];
        for(int i = 0; i < 100; i++){
            JLabel label = new JLabel();
            label.setBorder(new LineBorder(Color.black));
            label.setOpaque(true);
            label.setBackground(Color.white);
            label.setName(String.valueOf(i));
            GridLabels[i] = label;
            pGrid.add(label);
        }
        InventoryShipLabels = new JLabel[]{lSchlachtschiff, lKreuzer, lZerstoerer, lUBoot};
        for(JLabel shipLabel : InventoryShipLabels){
            shipLabel.setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
    }
    
    public JLabel[] getInventoryShipLabels(){
        return InventoryShipLabels;
    }
    
    public JLabel[] getGridButtons(){
        return GridLabels;
    }
    
    private void selectShip(String oldShip, String newShip){
        for(JLabel shipLabel : InventoryShipLabels){
            if(shipLabel.getText() == oldShip){
                shipLabel.setBorder(null);
            }else if(shipLabel.getText() == newShip){
                shipLabel.setBorder(new LineBorder(Color.red, 5));
            }
        }
    }
    
    private void selectStartCell(int oldCell, int newCell){
        ImageIcon cross = new ImageIcon(new ImageIcon(getClass().getResource("/resources/cross.png")).getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH));
        if(oldCell != -1){
            GridLabels[oldCell].setIcon(null);
            GridLabels[oldCell].setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }
        if(newCell != -1){
            GridLabels[newCell].setIcon(cross);
            GridLabels[newCell].setCursor(new Cursor(Cursor.HAND_CURSOR));
        }
        
    }
    
    private void markPossiblePlacements(int[] oldPlacements, int[] newPlacements){
        ImageIcon point = new ImageIcon(new ImageIcon(getClass().getResource("/resources/point.png")).getImage().getScaledInstance(50, 50, java.awt.Image.SCALE_SMOOTH));
        for(int oldPlacement : oldPlacements){
            if(oldPlacement != -1){
                GridLabels[oldPlacement].setIcon(null);
                GridLabels[oldPlacement].setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
        for(int newPlacement : newPlacements){
           if(newPlacement != -1){
                GridLabels[newPlacement].setIcon(point);
                GridLabels[newPlacement].setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        }
    }
    
    private void placeShips(CShip[] oldShips, CShip[] newShips){
        for(CShip oldShip : oldShips){
            if(oldShip != null){
                for(int coordinate : oldShip.getCoordinates()){
                    if(coordinate != -1){
                        GridLabels[coordinate].setBackground(Color.black);
                    }
                }
            }
        }
        for(CShip newShip : newShips){
            if(newShip != null){
                for(int coordinate : newShip.getCoordinates()){
                    if(coordinate != -1){
                        GridLabels[coordinate].setBackground(Color.black);
                    }
                }
            }
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        String propName = evt.getPropertyName();
        Object oldValue = evt.getOldValue();
        Object newValue = evt.getNewValue();
        if(propName == "selectedShip"){
            selectShip(oldValue.toString(), newValue.toString());
        }else if(propName == "startCell"){
            selectStartCell((Integer)oldValue, (Integer)newValue);
        }else if(propName == "possiblePlacements"){
            markPossiblePlacements((int[])oldValue, (int[])newValue);
        }else if(propName == "placedShips"){
            placeShips((CShip[])oldValue, (CShip[])newValue);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pGrid = new javax.swing.JPanel();
        pShips = new javax.swing.JPanel();
        lShips = new javax.swing.JLabel();
        lZerstoerer = new javax.swing.JLabel();
        lKreuzer = new javax.swing.JLabel();
        lSchlachtschiff = new javax.swing.JLabel();
        lUBoot = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pGrid.setLayout(new java.awt.GridLayout(10, 10));

        lShips.setText("Schiffe:");

        lZerstoerer.setBackground(new java.awt.Color(0, 0, 0));
        lZerstoerer.setForeground(new java.awt.Color(255, 255, 255));
        lZerstoerer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lZerstoerer.setText("Zerst√∂rer");
        lZerstoerer.setOpaque(true);
        lZerstoerer.setPreferredSize(new java.awt.Dimension(250, 10));

        lKreuzer.setBackground(new java.awt.Color(0, 0, 0));
        lKreuzer.setForeground(new java.awt.Color(255, 255, 255));
        lKreuzer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lKreuzer.setText("Kreuzer");
        lKreuzer.setOpaque(true);
        lKreuzer.setPreferredSize(new java.awt.Dimension(250, 10));

        lSchlachtschiff.setBackground(new java.awt.Color(0, 0, 0));
        lSchlachtschiff.setForeground(new java.awt.Color(255, 255, 255));
        lSchlachtschiff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lSchlachtschiff.setText("Schlachtschiff");
        lSchlachtschiff.setOpaque(true);
        lSchlachtschiff.setPreferredSize(new java.awt.Dimension(250, 10));

        lUBoot.setBackground(new java.awt.Color(0, 0, 0));
        lUBoot.setForeground(new java.awt.Color(255, 255, 255));
        lUBoot.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lUBoot.setText("U-Boot");
        lUBoot.setOpaque(true);
        lUBoot.setPreferredSize(new java.awt.Dimension(250, 10));

        javax.swing.GroupLayout pShipsLayout = new javax.swing.GroupLayout(pShips);
        pShips.setLayout(pShipsLayout);
        pShipsLayout.setHorizontalGroup(
            pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pShipsLayout.createSequentialGroup()
                .addGroup(pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lShips)
                    .addGroup(pShipsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lSchlachtschiff, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lZerstoerer, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lUBoot, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lKreuzer, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        pShipsLayout.setVerticalGroup(
            pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pShipsLayout.createSequentialGroup()
                .addComponent(lShips)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lSchlachtschiff, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lKreuzer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pShipsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lZerstoerer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lUBoot, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pShips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pGrid, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pShips, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lKreuzer;
    private javax.swing.JLabel lSchlachtschiff;
    private javax.swing.JLabel lShips;
    private javax.swing.JLabel lUBoot;
    private javax.swing.JLabel lZerstoerer;
    private javax.swing.JPanel pGrid;
    private javax.swing.JPanel pShips;
    // End of variables declaration//GEN-END:variables
}
